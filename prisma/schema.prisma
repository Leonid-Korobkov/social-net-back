generator client {
  provider = "prisma-client-js"
  // output   = "/app/generated/prisma-client"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                  Int                 @id @default(autoincrement())
  email               String              @unique
  password            String
  name                String?
  userName            String?             @unique
  avatarUrl           String?
  dateOfBirth         DateTime?
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  bio                 String?
  location            String?
  posts               Post[]
  likes               Like[]
  comments            Comment[]
  followers           Follows[]           @relation("following")
  following           Follows[]           @relation("followers")
  commentLike         CommentLike[]
  showEmail           Boolean             @default(false)
  showBio             Boolean             @default(true)
  showLocation        Boolean             @default(true)
  showDateOfBirth     Boolean             @default(true)
  reduceAnimation     Boolean             @default(false)
  PostView            PostView[]
  PostShare           PostShare[]
  emailVerifications  EmailVerification[]
  passwordResets      PasswordReset[]
  isEmailVerified     Boolean             @default(false)
  lastLoginAt         DateTime?
  failedLoginAttempts Int                 @default(0)
  lockedUntil         DateTime?

  @@index([email])
  @@index([name])
}

model Follows {
  id          Int   @id @default(autoincrement())
  follower    User? @relation("followers", fields: [followerId], references: [id])
  followerId  Int?
  following   User? @relation("following", fields: [followingId], references: [id])
  followingId Int?

  @@index([followerId])
  @@index([followingId])
}

model Post {
  id             Int         @id @default(autoincrement())
  title          String?
  content        String
  author         User        @relation(fields: [authorId], references: [id])
  authorId       Int
  likes          Like[]
  comments       Comment[]
  likeCount      Int?        @default(0)
  commentCount   Int?        @default(0)
  viewCount      Int         @default(0)
  shareCount     Int         @default(0)
  media          String[]    @default([])
  createdAt      DateTime    @default(now())
  PostView       PostView[]
  PostShare      PostShare[]
  idEdited       Boolean     @default(false)
  score          Int         @default(0)
  updatedScoreAt DateTime    @default(now())

  @@index([authorId])
  @@index([createdAt])
}

model PostView {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
  createdAt DateTime @default(now())

  @@unique([userId, postId])
}

model PostShare {
  id     Int  @id @default(autoincrement())
  user   User @relation(fields: [userId], references: [id])
  userId Int
  post   Post @relation(fields: [postId], references: [id])
  postId Int

  @@unique([userId, postId])
}

model Like {
  id        Int      @id @default(autoincrement())
  user      User?    @relation(fields: [userId], references: [id])
  userId    Int?
  post      Post?    @relation(fields: [postId], references: [id])
  postId    Int?
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([postId])
  @@index([createdAt])
}

model Comment {
  id        Int           @id @default(autoincrement())
  content   String
  post      Post          @relation(fields: [postId], references: [id])
  postId    Int
  user      User?         @relation(fields: [userId], references: [id])
  userId    Int?
  likes     CommentLike[]
  likeCount Int?          @default(0)
  createdAt DateTime      @default(now())
  media     String[]      @default([])

  @@index([postId])
  @@index([userId])
  @@index([createdAt])
}

model CommentLike {
  id        Int      @id @default(autoincrement())
  comment   Comment  @relation(fields: [commentId], references: [id])
  commentId Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())

  @@unique([commentId, userId])
  @@index([userId])
  @@index([commentId])
  @@index([createdAt])
}

model EmailVerification {
  id        Int      @id @default(autoincrement())
  userId    Int
  code      String
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PasswordReset {
  id        Int      @id @default(autoincrement())
  userId    Int
  code      String
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}


model AuthLog {
  id         Int      @id @default(autoincrement())
  sessionId  String
  userId     Int
  email      String
  userName   String
  name       String?
  ipAddress  String
  device     String
  browser    String
  browserVersion String?
  os         String
  location   Json
  timestamp  DateTime
  event      String   // 'login', 'register', 'verify', и т.д.
}