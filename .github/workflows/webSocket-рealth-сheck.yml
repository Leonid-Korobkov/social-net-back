name: WebSocket Health Check

on:
  workflow_dispatch: # –¢–æ–ª—å–∫–æ —Ä—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫
    inputs:
      check_type:
        description: '–¢–∏–ø –ø—Ä–æ–≤–µ—Ä–∫–∏'
        required: false
        default: 'full'
        type: choice
        options:
          - basic
          - full
          - connections
          - user-test
          - maintenance
      user_id:
        description: 'ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)'
        required: false
        type: string
      cleanup_sessions_days:
        description: '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç —Å–µ—Å—Å–∏–π –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ (–¥–Ω–∏)'
        required: false
        default: '30'
        type: string
      test_message:
        description: '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é'
        required: false
        default: '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç CI/CD'
        type: string

jobs:
  websocket-health:
    runs-on: ubuntu-latest

    steps:
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Basic Server Health Check
        run: |
          echo "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞..."
          response=$(curl -s -w "%{http_code}" -o /tmp/response.txt ${{ secrets.RENDER_URL }}/hello)
          if [ "$response" = "200" ]; then
            echo "‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç"
            cat /tmp/response.txt
          else
            echo "‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç (–∫–æ–¥: $response)"
            cat /tmp/response.txt
            exit 1
          fi

      - name: System Information Check
        run: |
          echo "üñ•Ô∏è –ü–æ–ª—É—á–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é..."
          curl -s -X GET ${{ secrets.RENDER_URL }}/api/admin/system-info \
            -H "Content-Type: application/json" \
            -H "x-opengraph-secret: ${{ secrets.OPENGRAPH_SECRET_PATH }}" | jq '.' || echo "‚ùå System info endpoint –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"

      - name: WebSocket Health Check
        run: |
          echo "üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ WebSocket —Å–µ—Ä–≤–∏—Å–∞..."
          health_response=$(curl -s -X GET ${{ secrets.RENDER_URL }}/api/websocket/health \
            -H "Content-Type: application/json" \
            -H "x-opengraph-secret: ${{ secrets.OPENGRAPH_SECRET_PATH }}")

          echo "$health_response" | jq '.'

          # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
          status=$(echo "$health_response" | jq -r '.status // "unknown"')
          if [ "$status" = "healthy" ]; then
            echo "‚úÖ WebSocket —Å–µ—Ä–≤–∏—Å –∑–¥–æ—Ä–æ–≤"
          else
            echo "‚ùå WebSocket —Å–µ—Ä–≤–∏—Å –Ω–µ–∑–¥–æ—Ä–æ–≤: $status"
            exit 1
          fi

      - name: WebSocket Statistics
        run: |
          echo "üìà –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π..."
          stats_response=$(curl -s -X GET ${{ secrets.RENDER_URL }}/api/websocket/stats \
            -H "Content-Type: application/json" \
            -H "x-opengraph-secret: ${{ secrets.OPENGRAPH_SECRET_PATH }}")

          echo "$stats_response" | jq '.'

          total_sockets=$(echo "$stats_response" | jq '.totalSockets // 0')
          total_users=$(echo "$stats_response" | jq '.totalUsers // 0')

          echo "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:"
          echo "  - –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: $total_users"
          echo "  - –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: $total_sockets"

          if [ "$total_sockets" -gt 0 ]; then
            echo "‚úÖ –ï—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"
          else
            echo "‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"
          fi

      - name: WebSocket Connection Test
        if: ${{ github.event.inputs.check_type == 'full' || github.event.inputs.check_type == 'connections' }}
        run: |
          echo "üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ..."

          # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π Node.js —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è WebSocket
          cat > test_websocket.js << 'EOF'
          const io = require('socket.io-client');

          const socket = io('${{ secrets.RENDER_URL }}', {
            transports: ['polling'],
            timeout: 15000
          });

          let testPassed = false;

          socket.on('connect', () => {
            console.log('‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
            console.log('Socket ID:', socket.id);
            testPassed = true;
            
            // –î–æ–∂–∏–¥–∞–µ–º—Å—è –Ω–µ–º–Ω–æ–≥–æ –∏ –æ—Ç–∫–ª—é—á–∞–µ–º—Å—è
            setTimeout(() => {
              socket.disconnect();
              process.exit(0);
            }, 2000);
          });

          socket.on('connect_error', (error) => {
            console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è WebSocket:', error.message);
            process.exit(1);
          });

          socket.on('disconnect', (reason) => {
            console.log('üîå WebSocket –æ—Ç–∫–ª—é—á–µ–Ω:', reason);
          });

          setTimeout(() => {
            if (!testPassed) {
              console.log('‚ùå Timeout –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ WebSocket');
              process.exit(1);
            }
          }, 20000);
          EOF

          # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º socket.io-client –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
          npm init -y > /dev/null 2>&1
          npm install socket.io-client > /dev/null 2>&1
          node test_websocket.js

      - name: Test User WebSocket (if user_id provided)
        if: ${{ github.event.inputs.user_id != '' && (github.event.inputs.check_type == 'full' || github.event.inputs.check_type == 'user-test') }}
        run: |
          echo "üë§ –¢–µ—Å—Ç–∏—Ä—É–µ–º WebSocket –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${{ github.event.inputs.user_id }}"

          # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
          echo "üìã –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ..."
          user_info=$(curl -s -X GET ${{ secrets.RENDER_URL }}/api/websocket/user/${{ github.event.inputs.user_id }} \
            -H "Content-Type: application/json" \
            -H "x-opengraph-secret: ${{ secrets.OPENGRAPH_SECRET_PATH }}")

          echo "$user_info" | jq '.'

          socket_count=$(echo "$user_info" | jq '.socketCount // 0')
          echo "üîå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç $socket_count –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"

          # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          cat > test_user_websocket.js << 'EOF'
          const io = require('socket.io-client');

          const socket = io('${{ secrets.RENDER_URL }}', {
            auth: {
              userId: '${{ github.event.inputs.user_id }}'
            },
            transports: ['polling'],
            timeout: 15000
          });

          socket.on('connect', () => {
            console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
            console.log('Socket ID:', socket.id);
            
            // –≠–º—É–ª–∏—Ä—É–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
            socket.emit('authenticate', '${{ github.event.inputs.user_id }}');
            
            setTimeout(() => {
              socket.disconnect();
              process.exit(0);
            }, 3000);
          });

          socket.on('connect_error', (error) => {
            console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error.message);
            process.exit(1);
          });

          socket.on('testMessage', (data) => {
            console.log('üì® –ü–æ–ª—É—á–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', data);
          });

          setTimeout(() => {
            console.log('‚ùå Timeout –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
            process.exit(1);
          }, 20000);
          EOF

          node test_user_websocket.js

      - name: Send Test Message to User
        if: ${{ github.event.inputs.user_id != '' && (github.event.inputs.check_type == 'full' || github.event.inputs.check_type == 'user-test') }}
        run: |
          echo "üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: ${{ github.event.inputs.user_id }}"

          test_message="${{ github.event.inputs.test_message }}"
          if [ -z "$test_message" ]; then
            test_message="–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç CI/CD —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"
          fi

          response=$(curl -s -w "%{http_code}" -o /tmp/test_message_response.txt \
            -X POST ${{ secrets.RENDER_URL }}/api/websocket/test-message/${{ github.event.inputs.user_id }} \
            -H "Content-Type: application/json" \
            -H "x-opengraph-secret: ${{ secrets.OPENGRAPH_SECRET_PATH }}" \
            -d "{\"message\": \"$test_message\", \"type\": \"ci_test\"}")

          if [ "$response" = "200" ]; then
            echo "‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"
            cat /tmp/test_message_response.txt | jq '.'
          elif [ "$response" = "404" ]; then
            echo "‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω"
            cat /tmp/test_message_response.txt | jq '.'
          else
            echo "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–∫–æ–¥: $response)"
            cat /tmp/test_message_response.txt
          fi

      - name: WebSocket Cleanup Test
        if: ${{ github.event.inputs.check_type == 'full' || github.event.inputs.check_type == 'maintenance' }}
        run: |
          echo "üßπ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—á–∏—Å—Ç–∫—É —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π..."

          response=$(curl -s -w "%{http_code}" -o /tmp/cleanup_response.txt \
            -X POST ${{ secrets.RENDER_URL }}/api/websocket/cleanup \
            -H "Content-Type: application/json" \
            -H "x-opengraph-secret: ${{ secrets.OPENGRAPH_SECRET_PATH }}")

          if [ "$response" = "200" ]; then
            echo "‚úÖ –û—á–∏—Å—Ç–∫–∞ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω–∞"
            cat /tmp/cleanup_response.txt | jq '.'
          else
            echo "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π (–∫–æ–¥: $response)"
            cat /tmp/cleanup_response.txt
          fi

      - name: Force Score Recalculation
        if: ${{ github.event.inputs.check_type == 'full' || github.event.inputs.check_type == 'maintenance' }}
        run: |
          echo "üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–µ—Å—á–µ—Ç —Å–∫–æ—Ä–æ–≤..."
          response=$(curl -s -w "%{http_code}" -o /tmp/recalc_response.txt \
            -X POST ${{ secrets.RENDER_URL }}/api/admin/recalculate-scores \
            -H "Content-Type: application/json" \
            -H "x-opengraph-secret: ${{ secrets.OPENGRAPH_SECRET_PATH }}")

          if [ "$response" = "200" ]; then
            echo "‚úÖ –ü–µ—Ä–µ—Å—á–µ—Ç —Å–∫–æ—Ä–æ–≤ –∑–∞–ø—É—â–µ–Ω"
            cat /tmp/recalc_response.txt | jq '.'
          else
            echo "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ (–∫–æ–¥: $response)"
            cat /tmp/recalc_response.txt
          fi

      - name: Clean Old Sessions
        if: ${{ github.event.inputs.check_type == 'full' || github.event.inputs.check_type == 'maintenance' }}
        run: |
          echo "üóëÔ∏è –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å–µ—Å—Å–∏–∏..."

          cleanup_days="${{ github.event.inputs.cleanup_sessions_days }}"
          if [ -z "$cleanup_days" ]; then
            cleanup_days="30"
          fi

          response=$(curl -s -w "%{http_code}" -o /tmp/cleanup_sessions_response.txt \
            -X POST ${{ secrets.RENDER_URL }}/api/admin/cleanup-sessions \
            -H "Content-Type: application/json" \
            -H "x-opengraph-secret: ${{ secrets.OPENGRAPH_SECRET_PATH }}" \
            -d "{\"maxAge\": $cleanup_days}")

          if [ "$response" = "200" ]; then
            echo "‚úÖ –û—á–∏—Å—Ç–∫–∞ —Å–µ—Å—Å–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω–∞"
            cat /tmp/cleanup_sessions_response.txt | jq '.'
          else
            echo "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å–µ—Å—Å–∏–π (–∫–æ–¥: $response)"
            cat /tmp/cleanup_sessions_response.txt
          fi

      - name: Performance Metrics
        if: ${{ github.event.inputs.check_type == 'full' }}
        run: |
          echo "‚ö° –°–æ–±–∏—Ä–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏..."

          # –ò–∑–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
          echo "üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤:"

          # Health check
          start_time=$(date +%s%N)
          curl -s ${{ secrets.RENDER_URL }}/api/websocket/health \
            -H "x-opengraph-secret: ${{ secrets.OPENGRAPH_SECRET_PATH }}" > /dev/null
          end_time=$(date +%s%N)
          health_time=$(( (end_time - start_time) / 1000000 ))
          echo "  - Health check: ${health_time}ms"

          # Stats endpoint
          start_time=$(date +%s%N)
          curl -s ${{ secrets.RENDER_URL }}/api/websocket/stats \
            -H "x-opengraph-secret: ${{ secrets.OPENGRAPH_SECRET_PATH }}" > /dev/null
          end_time=$(date +%s%N)
          stats_time=$(( (end_time - start_time) / 1000000 ))
          echo "  - Stats endpoint: ${stats_time}ms"

          # System info
          start_time=$(date +%s%N)
          curl -s ${{ secrets.RENDER_URL }}/api/admin/system-info \
            -H "x-opengraph-secret: ${{ secrets.OPENGRAPH_SECRET_PATH }}" > /dev/null
          end_time=$(date +%s%N)
          system_time=$(( (end_time - start_time) / 1000000 ))
          echo "  - System info: ${system_time}ms"

          echo "üìà –°—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:"
          avg_time=$(( (health_time + stats_time + system_time) / 3 ))
          echo "  - –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞: ${avg_time}ms"

          if [ $avg_time -lt 1000 ]; then
            echo "‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –Ω–æ—Ä–º–µ"
          elif [ $avg_time -lt 3000 ]; then
            echo "‚ö†Ô∏è –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–Ω–∏–∂–µ–Ω–∞"
          else
            echo "‚ùå –ù–∏–∑–∫–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å"
          fi

      - name: Final Health Summary
        if: always()
        run: |
          echo "üìã –ò–¢–û–ì–û–í–ê–Ø –°–í–û–î–ö–ê –ü–†–û–í–ï–†–ö–ò WEBSOCKET"
          echo "================================================"
          echo "üïê –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: $(date)"
          echo "üåç URL —Å–µ—Ä–≤–µ—Ä–∞: ${{ secrets.RENDER_URL }}"
          echo "üîß –¢–∏–ø –ø—Ä–æ–≤–µ—Ä–∫–∏: ${{ github.event.inputs.check_type || 'basic' }}"

          if [ "${{ github.event.inputs.user_id }}" != "" ]; then
            echo "üë§ –¢–µ—Å—Ç–∏—Ä—É–µ–º—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${{ github.event.inputs.user_id }}"
          fi

          if [ "${{ github.event.inputs.cleanup_sessions_days }}" != "" ]; then
            echo "üóëÔ∏è –í–æ–∑—Ä–∞—Å—Ç —Å–µ—Å—Å–∏–π –¥–ª—è –æ—á–∏—Å—Ç–∫–∏: ${{ github.event.inputs.cleanup_sessions_days }} –¥–Ω–µ–π"
          fi

          echo "================================================"
          echo "‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"

      - name: Notify on Failure
        if: failure()
        run: |
          echo "üö® –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´!"
          echo "–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ WebSocket –Ω–µ –ø—Ä–æ—à–ª–∏."
          echo "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã."
          echo "URL —Å–µ—Ä–≤–µ—Ä–∞: ${{ secrets.RENDER_URL }}"
          echo "–í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: $(date)"
