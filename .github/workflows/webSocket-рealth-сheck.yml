name: WebSocket Health Check

on:
  workflow_dispatch: # –¢–æ–ª—å–∫–æ —Ä—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫
    inputs:
      check_type:
        description: '–¢–∏–ø –ø—Ä–æ–≤–µ—Ä–∫–∏'
        required: false
        default: 'full'
        type: choice
        options:
          - basic
          - full
          - connections
      user_id:
        description: 'ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)'
        required: false
        type: string

jobs:
  websocket-health:
    runs-on: ubuntu-latest

    steps:
      - name: Basic Server Health Check
        run: |
          echo "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞..."
          response=$(curl -s -w "%{http_code}" -o /tmp/response.txt ${{ secrets.RENDER_URL }}/hello)
          if [ "$response" = "200" ]; then
            echo "‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç"
          else
            echo "‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç (–∫–æ–¥: $response)"
            exit 1
          fi

      - name: WebSocket Stats Check
        run: |
          echo "üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π..."
          curl -s -X GET ${{ secrets.RENDER_URL }}/api/websocket/health \
            -H "Content-Type: application/json" \
            -H "x-opengraph-secret: ${{ secrets.OPENGRAPH_SECRET_PATH }}" | jq '.' || echo "‚ùå WebSocket health endpoint –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"

      - name: WebSocket Connections Check
        if: ${{ github.event.inputs.check_type == 'full' || github.event.inputs.check_type == 'connections' }}
        run: |
          echo "üîå –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è..."
          connections=$(curl -s -X GET ${{ secrets.RENDER_URL }}/api/websocket/stats \
          -H "Content-Type: application/json" \
          -H "x-opengraph-secret: ${{ secrets.OPENGRAPH_SECRET_PATH }}" | jq '.totalSockets // 0')
          echo "–ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: $connections"

          if [ "$connections" -gt 0 ]; then
            echo "‚úÖ –ï—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"
          else
            echo "‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"
          fi

      - name: WebSocket Connection Test
        if: ${{ github.event.inputs.check_type == 'full' }}
        run: |
          echo "üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ..."

          # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π Node.js —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è WebSocket
          cat > test_websocket.js << 'EOF'
          const io = require('socket.io-client');

          const socket = io('${{ secrets.RENDER_URL }}', {
            transports: ['polling'],
            timeout: 10000
          });

          let testPassed = false;

          socket.on('connect', () => {
            console.log('‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
            testPassed = true;
            socket.disconnect();
            process.exit(0);
          });

          socket.on('connect_error', (error) => {
            console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è WebSocket:', error.message);
            process.exit(1);
          });

          setTimeout(() => {
            if (!testPassed) {
              console.log('‚ùå Timeout –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ WebSocket');
              process.exit(1);
            }
          }, 15000);
          EOF

          # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º socket.io-client –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
          npm init -y > /dev/null 2>&1
          npm install socket.io-client > /dev/null 2>&1
          node test_websocket.js

      - name: Force Score Recalculation
        if: ${{ github.event.inputs.check_type == 'full' }}
        run: |
          echo "üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–µ—Å—á–µ—Ç —Å–∫–æ—Ä–æ–≤..."
          response=$(curl -s -w "%{http_code}" -o /tmp/recalc_response.txt \
            -X POST ${{ secrets.RENDER_URL }}/api/admin/recalculate-scores \
            -H "Content-Type: application/json" \
            -H "x-opengraph-secret: ${{ secrets.OPENGRAPH_SECRET_PATH }}")

          if [ "$response" = "200" ]; then
            echo "‚úÖ –ü–µ—Ä–µ—Å—á–µ—Ç —Å–∫–æ—Ä–æ–≤ –∑–∞–ø—É—â–µ–Ω"
            cat /tmp/recalc_response.txt
          else
            echo "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ (–∫–æ–¥: $response)"
            cat /tmp/recalc_response.txt
          fi

      - name: Clean Old Sessions
        if: ${{ github.event.inputs.check_type == 'full' }}
        run: |
          echo "üßπ –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å–µ—Å—Å–∏–∏..."
          response=$(curl -s -w "%{http_code}" -o /tmp/cleanup_response.txt \
            -X POST ${{ secrets.RENDER_URL }}/api/admin/cleanup-sessions \
            -H "Content-Type: application/json" \
            -H "x-opengraph-secret: ${{ secrets.OPENGRAPH_SECRET_PATH }}")

          if [ "$response" = "200" ]; then
            echo "‚úÖ –û—á–∏—Å—Ç–∫–∞ —Å–µ—Å—Å–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω–∞"
            cat /tmp/cleanup_response.txt
          else
            echo "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å–µ—Å—Å–∏–π (–∫–æ–¥: $response)"
            cat /tmp/cleanup_response.txt
          fi

      - name: Test User WebSocket (if user_id provided)
        if: ${{ github.event.inputs.user_id != '' }}
        run: |
          echo "üë§ –¢–µ—Å—Ç–∏—Ä—É–µ–º WebSocket –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${{ github.event.inputs.user_id }}"

          cat > test_user_websocket.js << 'EOF'
          const io = require('socket.io-client');

          const socket = io('${{ secrets.RENDER_URL }}', {
            auth: {
              userId: '${{ github.event.inputs.user_id }}'
            },
            transports: ['polling'],
            timeout: 10000
          });

          socket.on('connect', () => {
            console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
            socket.emit('authenticate', '${{ github.event.inputs.user_id }}');
            
            setTimeout(() => {
              socket.disconnect();
              process.exit(0);
            }, 3000);
          });

          socket.on('connect_error', (error) => {
            console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error.message);
            process.exit(1);
          });

          setTimeout(() => {
            console.log('‚ùå Timeout –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
            process.exit(1);
          }, 15000);
          EOF

          node test_user_websocket.js

      - name: Summary
        if: always()
        run: |
          echo "üìã –°–≤–æ–¥–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ WebSocket:"
          echo "- –¢–∏–ø –ø—Ä–æ–≤–µ—Ä–∫–∏: ${{ github.event.inputs.check_type || 'basic' }}"
          echo "- –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: $(date)"
          echo "- URL —Å–µ—Ä–≤–µ—Ä–∞: ${{ secrets.RENDER_URL }}"

          if [ "${{ github.event.inputs.user_id }}" != "" ]; then
            echo "- –¢–µ—Å—Ç–∏—Ä—É–µ–º—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${{ github.event.inputs.user_id }}"
          fi
